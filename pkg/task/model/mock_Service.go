// Code generated by mockery v1.0.0. DO NOT EDIT.

package model

import (
	context "context"
	"tasks/pkg/user/model"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *MockService) Add(_a0 context.Context, _a1 *Task) (*Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Task
	if rf, ok := ret.Get(0).(func(context.Context, *Task) *Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Assign provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockService) Assign(_a0 context.Context, _a1 *Task, _a2 ...*model.User) (*Task, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Task
	if rf, ok := ret.Get(0).(func(context.Context, *Task, ...*model.User) *Task); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Task, ...*model.User) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockService) Delete(_a0 context.Context, _a1 *Task) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockService) Get(ctx context.Context, id int64) (*Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *Task
	if rf, ok := ret.Get(0).(func(context.Context, int64) *Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MockService) List(_a0 context.Context) ([]*Task, error) {
	ret := _m.Called(_a0)

	var r0 []*Task
	if rf, ok := ret.Get(0).(func(context.Context) []*Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockService) Update(_a0 context.Context, _a1 *Task) (*Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Task
	if rf, ok := ret.Get(0).(func(context.Context, *Task) *Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
