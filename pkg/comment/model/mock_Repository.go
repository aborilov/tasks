// Code generated by mockery v1.0.0. DO NOT EDIT.

package model

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, taskID, userID, msg
func (_m *MockRepository) Add(ctx context.Context, taskID int64, userID int64, msg string) (*Comment, error) {
	ret := _m.Called(ctx, taskID, userID, msg)

	var r0 *Comment
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) *Comment); ok {
		r0 = rf(ctx, taskID, userID, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, taskID, userID, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockRepository) Get(ctx context.Context, id int64) (*Comment, error) {
	ret := _m.Called(ctx, id)

	var r0 *Comment
	if rf, ok := ret.Get(0).(func(context.Context, int64) *Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MockRepository) List(_a0 context.Context) ([]*Comment, error) {
	ret := _m.Called(_a0)

	var r0 []*Comment
	if rf, ok := ret.Get(0).(func(context.Context) []*Comment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Update(_a0 context.Context, _a1 *Comment) (*Comment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Comment
	if rf, ok := ret.Get(0).(func(context.Context, *Comment) *Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Comment) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
